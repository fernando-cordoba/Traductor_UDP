
import java.awt.Color;
import java.awt.print.Paper;
import java.io.FileInputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import javax.swing.JOptionPane;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author suneater
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        BtnStartConexion = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.Color.cyan);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 2, 18)); // NOI18N
        jLabel1.setText("Servidor UDP");

        BtnStartConexion.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        BtnStartConexion.setText("Start Server");
        BtnStartConexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnStartConexionActionPerformed(evt);
            }
        });

        jLabel2.setText("Server administrado por:\n");

        jLabel3.setText("- Fernando Córdoba ");

        jLabel4.setText("- Eli Ramos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BtnStartConexion)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))))
                .addContainerGap(201, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BtnStartConexion, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jLabel1.getAccessibleContext().setAccessibleName("Servidor");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int BuscarPalabra(ArrayList<String>Words,String palabra)
    {
        int Index=0;
        boolean Search = false;
        for (String Word : Words)
        {
            if(Word.compareToIgnoreCase(palabra)==0)
            {
               Search = true;
                break;
            }
           Index++;
        }
        if(Search == false )
        {
            Index = -1;
        }
        
        return Index;
    }
    private void BtnStartConexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnStartConexionActionPerformed
        JOptionPane.showMessageDialog(rootPane,"Arrancando server");
        
        dataTR DATOS = new  dataTR();
        
        DatagramSocket SocketUDP = null;
        try
         {
             FileInputStream fichero_español = new FileInputStream("español.txt");
             FileInputStream fichero_ingles = new FileInputStream("ingles.txt");
             
             Scanner español = new Scanner(fichero_español);
             Scanner ingles = new Scanner(fichero_ingles);
             
             ArrayList<String>traduccion_español = new ArrayList<String>();
             ArrayList<String>traduccion_ingles = new ArrayList<String>();
             byte[] buf = new  byte[1024];
             String Cadena_Español = "";
             String Cadena_Ingles = "";
             Boolean SeguirLeyendo = true;
            
             /*El ciclo lo que hace es leer el archivo todas la palabaras 
             
             *y dividirlas en dos array uno para ingles y otro para español se termina de leer hasta
             que se encuentra la palabra finxxfin*/ 
             while(SeguirLeyendo)
             {
                 Cadena_Español = español.nextLine();
                 Cadena_Ingles = ingles.nextLine();
                 
                 if(Cadena_Español.equalsIgnoreCase("-adios")&&(Cadena_Ingles.equalsIgnoreCase("-adios")))
                 {
                     SeguirLeyendo= false;
                 }
                 else
                 {
                     traduccion_español.add(Cadena_Español);
                     traduccion_ingles.add(Cadena_Ingles);
                 }
                 
             }
             fichero_español.close();
             fichero_ingles.close();
             español.close();
             ingles.close();
             
             /*Iniciamos la conexion y se dispone a enviar y recivir mensajes*/
             SocketUDP = new DatagramSocket(5000);
             DatagramPacket Paqcket = new DatagramPacket(buf,buf.length);
             SocketUDP.receive(Paqcket);
             
             String cadena = new String(Paqcket.getData(),0,Paqcket.getLength());
             
             String[]Cadenas = cadena.split("sep");
             String PalabraTraducida = "";
             int IndexElemento;
             
             
             DATOS.Tipo = Integer.parseInt(Cadenas[0]);
             DATOS.Palabra = Cadenas[1];
             //JOptionPane.showMessageDialog(rootPane, "OPCION ENVIADA: " + DATOS.Tipo);
             
             
             if(DATOS.Tipo == 1)//ingles a español
             {
                 IndexElemento = BuscarPalabra(traduccion_ingles, DATOS.Palabra);
                 if(IndexElemento==-1)
                 {
                     PalabraTraducida = "No se encontro la palabra";
                 }
                 else
                 {
                     PalabraTraducida = traduccion_español.get(IndexElemento);
                     
                 }
                 
             }
             
             else //ESPANÑOL TO ENGLISH
             {
                 IndexElemento = BuscarPalabra(traduccion_español, DATOS.Palabra);
                 if(IndexElemento==-1)
                 {
                     PalabraTraducida = "No se encontro la palabra";
                 }
                 else
                 {
                     PalabraTraducida = traduccion_ingles.get(IndexElemento);
                     
                 }
             }
             
             /*Enviando respuesta*/
             
            byte[]Eviar = PalabraTraducida.getBytes();
            DatagramPacket Paketsend = new DatagramPacket(Eviar,Eviar.length,Paqcket.getAddress(),Paqcket.getPort());
            
           SocketUDP.send(Paketsend);
           JOptionPane.showMessageDialog(rootPane, "Se envio el mensaje con exito¡¡");
             
             
             
         }
        catch(IOException io)
        {
            JOptionPane.showMessageDialog(rootPane,"Error posiblemente elarchivo no exista: "+ io.getMessage());
        }
         catch(Exception e){
             JOptionPane.showMessageDialog(null,"Ocurrio un error en el server: "+e.getMessage());
         }
        finally
        {
            if(SocketUDP!= null)
                SocketUDP.close();
            
            
        }
    }//GEN-LAST:event_BtnStartConexionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnStartConexion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
